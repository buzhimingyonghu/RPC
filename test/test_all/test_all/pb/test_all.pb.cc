// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test_all.proto

#include "test_all.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR addtestRequest::addtestRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.goods_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.price_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct addtestRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR addtestRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~addtestRequestDefaultTypeInternal() {}
  union {
    addtestRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 addtestRequestDefaultTypeInternal _addtestRequest_default_instance_;
PROTOBUF_CONSTEXPR addtestResponse::addtestResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.res_info_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.order_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ret_code_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct addtestResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR addtestResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~addtestResponseDefaultTypeInternal() {}
  union {
    addtestResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 addtestResponseDefaultTypeInternal _addtestResponse_default_instance_;
PROTOBUF_CONSTEXPR querytestRequest::querytestRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.order_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct querytestRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR querytestRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~querytestRequestDefaultTypeInternal() {}
  union {
    querytestRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 querytestRequestDefaultTypeInternal _querytestRequest_default_instance_;
PROTOBUF_CONSTEXPR querytestResponse::querytestResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.res_info_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.order_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.goods_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ret_code_)*/0
  , /*decltype(_impl_.price_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct querytestResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR querytestResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~querytestResponseDefaultTypeInternal() {}
  union {
    querytestResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 querytestResponseDefaultTypeInternal _querytestResponse_default_instance_;
static ::_pb::Metadata file_level_metadata_test_5fall_2eproto[4];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_test_5fall_2eproto = nullptr;
static const ::_pb::ServiceDescriptor* file_level_service_descriptors_test_5fall_2eproto[1];

const uint32_t TableStruct_test_5fall_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::addtestRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::addtestRequest, _impl_.price_),
  PROTOBUF_FIELD_OFFSET(::addtestRequest, _impl_.goods_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::addtestResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::addtestResponse, _impl_.ret_code_),
  PROTOBUF_FIELD_OFFSET(::addtestResponse, _impl_.res_info_),
  PROTOBUF_FIELD_OFFSET(::addtestResponse, _impl_.order_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::querytestRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::querytestRequest, _impl_.order_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::querytestResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::querytestResponse, _impl_.ret_code_),
  PROTOBUF_FIELD_OFFSET(::querytestResponse, _impl_.res_info_),
  PROTOBUF_FIELD_OFFSET(::querytestResponse, _impl_.order_id_),
  PROTOBUF_FIELD_OFFSET(::querytestResponse, _impl_.price_),
  PROTOBUF_FIELD_OFFSET(::querytestResponse, _impl_.goods_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::addtestRequest)},
  { 8, -1, -1, sizeof(::addtestResponse)},
  { 17, -1, -1, sizeof(::querytestRequest)},
  { 24, -1, -1, sizeof(::querytestResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_addtestRequest_default_instance_._instance,
  &::_addtestResponse_default_instance_._instance,
  &::_querytestRequest_default_instance_._instance,
  &::_querytestResponse_default_instance_._instance,
};

const char descriptor_table_protodef_test_5fall_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016test_all.proto\".\n\016addtestRequest\022\r\n\005pr"
  "ice\030\001 \001(\005\022\r\n\005goods\030\002 \001(\t\"G\n\017addtestRespo"
  "nse\022\020\n\010ret_code\030\001 \001(\005\022\020\n\010res_info\030\002 \001(\t\022"
  "\020\n\010order_id\030\003 \001(\t\"$\n\020querytestRequest\022\020\n"
  "\010order_id\030\001 \001(\t\"g\n\021querytestResponse\022\020\n\010"
  "ret_code\030\001 \001(\005\022\020\n\010res_info\030\002 \001(\t\022\020\n\010orde"
  "r_id\030\003 \001(\t\022\r\n\005price\030\004 \001(\005\022\r\n\005goods\030\005 \001(\t"
  "2q\n\013TestService\022-\n\010add_test\022\017.addtestReq"
  "uest\032\020.addtestResponse\0223\n\nquery_test\022\021.q"
  "uerytestRequest\032\022.querytestResponseB\003\200\001\001"
  "b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_test_5fall_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_test_5fall_2eproto = {
    false, false, 408, descriptor_table_protodef_test_5fall_2eproto,
    "test_all.proto",
    &descriptor_table_test_5fall_2eproto_once, nullptr, 0, 4,
    schemas, file_default_instances, TableStruct_test_5fall_2eproto::offsets,
    file_level_metadata_test_5fall_2eproto, file_level_enum_descriptors_test_5fall_2eproto,
    file_level_service_descriptors_test_5fall_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_test_5fall_2eproto_getter() {
  return &descriptor_table_test_5fall_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_test_5fall_2eproto(&descriptor_table_test_5fall_2eproto);

// ===================================================================

class addtestRequest::_Internal {
 public:
};

addtestRequest::addtestRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:addtestRequest)
}
addtestRequest::addtestRequest(const addtestRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  addtestRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.goods_){}
    , decltype(_impl_.price_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.goods_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.goods_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_goods().empty()) {
    _this->_impl_.goods_.Set(from._internal_goods(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.price_ = from._impl_.price_;
  // @@protoc_insertion_point(copy_constructor:addtestRequest)
}

inline void addtestRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.goods_){}
    , decltype(_impl_.price_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.goods_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.goods_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

addtestRequest::~addtestRequest() {
  // @@protoc_insertion_point(destructor:addtestRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void addtestRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.goods_.Destroy();
}

void addtestRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void addtestRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:addtestRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.goods_.ClearToEmpty();
  _impl_.price_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* addtestRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 price = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string goods = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_goods();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "addtestRequest.goods"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* addtestRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:addtestRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 price = 1;
  if (this->_internal_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_price(), target);
  }

  // string goods = 2;
  if (!this->_internal_goods().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_goods().data(), static_cast<int>(this->_internal_goods().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "addtestRequest.goods");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_goods(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:addtestRequest)
  return target;
}

size_t addtestRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:addtestRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string goods = 2;
  if (!this->_internal_goods().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_goods());
  }

  // int32 price = 1;
  if (this->_internal_price() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_price());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData addtestRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    addtestRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*addtestRequest::GetClassData() const { return &_class_data_; }


void addtestRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<addtestRequest*>(&to_msg);
  auto& from = static_cast<const addtestRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:addtestRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_goods().empty()) {
    _this->_internal_set_goods(from._internal_goods());
  }
  if (from._internal_price() != 0) {
    _this->_internal_set_price(from._internal_price());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void addtestRequest::CopyFrom(const addtestRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:addtestRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool addtestRequest::IsInitialized() const {
  return true;
}

void addtestRequest::InternalSwap(addtestRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.goods_, lhs_arena,
      &other->_impl_.goods_, rhs_arena
  );
  swap(_impl_.price_, other->_impl_.price_);
}

::PROTOBUF_NAMESPACE_ID::Metadata addtestRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_test_5fall_2eproto_getter, &descriptor_table_test_5fall_2eproto_once,
      file_level_metadata_test_5fall_2eproto[0]);
}

// ===================================================================

class addtestResponse::_Internal {
 public:
};

addtestResponse::addtestResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:addtestResponse)
}
addtestResponse::addtestResponse(const addtestResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  addtestResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.res_info_){}
    , decltype(_impl_.order_id_){}
    , decltype(_impl_.ret_code_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.res_info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.res_info_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_res_info().empty()) {
    _this->_impl_.res_info_.Set(from._internal_res_info(), 
      _this->GetArenaForAllocation());
  }
  _impl_.order_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.order_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_order_id().empty()) {
    _this->_impl_.order_id_.Set(from._internal_order_id(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.ret_code_ = from._impl_.ret_code_;
  // @@protoc_insertion_point(copy_constructor:addtestResponse)
}

inline void addtestResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.res_info_){}
    , decltype(_impl_.order_id_){}
    , decltype(_impl_.ret_code_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.res_info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.res_info_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.order_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.order_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

addtestResponse::~addtestResponse() {
  // @@protoc_insertion_point(destructor:addtestResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void addtestResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.res_info_.Destroy();
  _impl_.order_id_.Destroy();
}

void addtestResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void addtestResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:addtestResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.res_info_.ClearToEmpty();
  _impl_.order_id_.ClearToEmpty();
  _impl_.ret_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* addtestResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 ret_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.ret_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string res_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_res_info();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "addtestResponse.res_info"));
        } else
          goto handle_unusual;
        continue;
      // string order_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_order_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "addtestResponse.order_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* addtestResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:addtestResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ret_code = 1;
  if (this->_internal_ret_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_ret_code(), target);
  }

  // string res_info = 2;
  if (!this->_internal_res_info().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_res_info().data(), static_cast<int>(this->_internal_res_info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "addtestResponse.res_info");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_res_info(), target);
  }

  // string order_id = 3;
  if (!this->_internal_order_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_order_id().data(), static_cast<int>(this->_internal_order_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "addtestResponse.order_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_order_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:addtestResponse)
  return target;
}

size_t addtestResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:addtestResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string res_info = 2;
  if (!this->_internal_res_info().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_res_info());
  }

  // string order_id = 3;
  if (!this->_internal_order_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_order_id());
  }

  // int32 ret_code = 1;
  if (this->_internal_ret_code() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ret_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData addtestResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    addtestResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*addtestResponse::GetClassData() const { return &_class_data_; }


void addtestResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<addtestResponse*>(&to_msg);
  auto& from = static_cast<const addtestResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:addtestResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_res_info().empty()) {
    _this->_internal_set_res_info(from._internal_res_info());
  }
  if (!from._internal_order_id().empty()) {
    _this->_internal_set_order_id(from._internal_order_id());
  }
  if (from._internal_ret_code() != 0) {
    _this->_internal_set_ret_code(from._internal_ret_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void addtestResponse::CopyFrom(const addtestResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:addtestResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool addtestResponse::IsInitialized() const {
  return true;
}

void addtestResponse::InternalSwap(addtestResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.res_info_, lhs_arena,
      &other->_impl_.res_info_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.order_id_, lhs_arena,
      &other->_impl_.order_id_, rhs_arena
  );
  swap(_impl_.ret_code_, other->_impl_.ret_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata addtestResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_test_5fall_2eproto_getter, &descriptor_table_test_5fall_2eproto_once,
      file_level_metadata_test_5fall_2eproto[1]);
}

// ===================================================================

class querytestRequest::_Internal {
 public:
};

querytestRequest::querytestRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:querytestRequest)
}
querytestRequest::querytestRequest(const querytestRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  querytestRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.order_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.order_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.order_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_order_id().empty()) {
    _this->_impl_.order_id_.Set(from._internal_order_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:querytestRequest)
}

inline void querytestRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.order_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.order_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.order_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

querytestRequest::~querytestRequest() {
  // @@protoc_insertion_point(destructor:querytestRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void querytestRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.order_id_.Destroy();
}

void querytestRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void querytestRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:querytestRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.order_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* querytestRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string order_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_order_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "querytestRequest.order_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* querytestRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:querytestRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string order_id = 1;
  if (!this->_internal_order_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_order_id().data(), static_cast<int>(this->_internal_order_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "querytestRequest.order_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_order_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:querytestRequest)
  return target;
}

size_t querytestRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:querytestRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string order_id = 1;
  if (!this->_internal_order_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_order_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData querytestRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    querytestRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*querytestRequest::GetClassData() const { return &_class_data_; }


void querytestRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<querytestRequest*>(&to_msg);
  auto& from = static_cast<const querytestRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:querytestRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_order_id().empty()) {
    _this->_internal_set_order_id(from._internal_order_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void querytestRequest::CopyFrom(const querytestRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:querytestRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool querytestRequest::IsInitialized() const {
  return true;
}

void querytestRequest::InternalSwap(querytestRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.order_id_, lhs_arena,
      &other->_impl_.order_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata querytestRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_test_5fall_2eproto_getter, &descriptor_table_test_5fall_2eproto_once,
      file_level_metadata_test_5fall_2eproto[2]);
}

// ===================================================================

class querytestResponse::_Internal {
 public:
};

querytestResponse::querytestResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:querytestResponse)
}
querytestResponse::querytestResponse(const querytestResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  querytestResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.res_info_){}
    , decltype(_impl_.order_id_){}
    , decltype(_impl_.goods_){}
    , decltype(_impl_.ret_code_){}
    , decltype(_impl_.price_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.res_info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.res_info_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_res_info().empty()) {
    _this->_impl_.res_info_.Set(from._internal_res_info(), 
      _this->GetArenaForAllocation());
  }
  _impl_.order_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.order_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_order_id().empty()) {
    _this->_impl_.order_id_.Set(from._internal_order_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.goods_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.goods_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_goods().empty()) {
    _this->_impl_.goods_.Set(from._internal_goods(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.ret_code_, &from._impl_.ret_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.price_) -
    reinterpret_cast<char*>(&_impl_.ret_code_)) + sizeof(_impl_.price_));
  // @@protoc_insertion_point(copy_constructor:querytestResponse)
}

inline void querytestResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.res_info_){}
    , decltype(_impl_.order_id_){}
    , decltype(_impl_.goods_){}
    , decltype(_impl_.ret_code_){0}
    , decltype(_impl_.price_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.res_info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.res_info_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.order_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.order_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.goods_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.goods_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

querytestResponse::~querytestResponse() {
  // @@protoc_insertion_point(destructor:querytestResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void querytestResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.res_info_.Destroy();
  _impl_.order_id_.Destroy();
  _impl_.goods_.Destroy();
}

void querytestResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void querytestResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:querytestResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.res_info_.ClearToEmpty();
  _impl_.order_id_.ClearToEmpty();
  _impl_.goods_.ClearToEmpty();
  ::memset(&_impl_.ret_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.price_) -
      reinterpret_cast<char*>(&_impl_.ret_code_)) + sizeof(_impl_.price_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* querytestResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 ret_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.ret_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string res_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_res_info();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "querytestResponse.res_info"));
        } else
          goto handle_unusual;
        continue;
      // string order_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_order_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "querytestResponse.order_id"));
        } else
          goto handle_unusual;
        continue;
      // int32 price = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string goods = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_goods();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "querytestResponse.goods"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* querytestResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:querytestResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ret_code = 1;
  if (this->_internal_ret_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_ret_code(), target);
  }

  // string res_info = 2;
  if (!this->_internal_res_info().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_res_info().data(), static_cast<int>(this->_internal_res_info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "querytestResponse.res_info");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_res_info(), target);
  }

  // string order_id = 3;
  if (!this->_internal_order_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_order_id().data(), static_cast<int>(this->_internal_order_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "querytestResponse.order_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_order_id(), target);
  }

  // int32 price = 4;
  if (this->_internal_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_price(), target);
  }

  // string goods = 5;
  if (!this->_internal_goods().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_goods().data(), static_cast<int>(this->_internal_goods().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "querytestResponse.goods");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_goods(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:querytestResponse)
  return target;
}

size_t querytestResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:querytestResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string res_info = 2;
  if (!this->_internal_res_info().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_res_info());
  }

  // string order_id = 3;
  if (!this->_internal_order_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_order_id());
  }

  // string goods = 5;
  if (!this->_internal_goods().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_goods());
  }

  // int32 ret_code = 1;
  if (this->_internal_ret_code() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ret_code());
  }

  // int32 price = 4;
  if (this->_internal_price() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_price());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData querytestResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    querytestResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*querytestResponse::GetClassData() const { return &_class_data_; }


void querytestResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<querytestResponse*>(&to_msg);
  auto& from = static_cast<const querytestResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:querytestResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_res_info().empty()) {
    _this->_internal_set_res_info(from._internal_res_info());
  }
  if (!from._internal_order_id().empty()) {
    _this->_internal_set_order_id(from._internal_order_id());
  }
  if (!from._internal_goods().empty()) {
    _this->_internal_set_goods(from._internal_goods());
  }
  if (from._internal_ret_code() != 0) {
    _this->_internal_set_ret_code(from._internal_ret_code());
  }
  if (from._internal_price() != 0) {
    _this->_internal_set_price(from._internal_price());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void querytestResponse::CopyFrom(const querytestResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:querytestResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool querytestResponse::IsInitialized() const {
  return true;
}

void querytestResponse::InternalSwap(querytestResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.res_info_, lhs_arena,
      &other->_impl_.res_info_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.order_id_, lhs_arena,
      &other->_impl_.order_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.goods_, lhs_arena,
      &other->_impl_.goods_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(querytestResponse, _impl_.price_)
      + sizeof(querytestResponse::_impl_.price_)
      - PROTOBUF_FIELD_OFFSET(querytestResponse, _impl_.ret_code_)>(
          reinterpret_cast<char*>(&_impl_.ret_code_),
          reinterpret_cast<char*>(&other->_impl_.ret_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata querytestResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_test_5fall_2eproto_getter, &descriptor_table_test_5fall_2eproto_once,
      file_level_metadata_test_5fall_2eproto[3]);
}

// ===================================================================

TestService::~TestService() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* TestService::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_test_5fall_2eproto);
  return file_level_service_descriptors_test_5fall_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* TestService::GetDescriptor() {
  return descriptor();
}

void TestService::add_test(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::addtestRequest*,
                         ::addtestResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method add_test() not implemented.");
  done->Run();
}

void TestService::query_test(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::querytestRequest*,
                         ::querytestResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method query_test() not implemented.");
  done->Run();
}

void TestService::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_test_5fall_2eproto[0]);
  switch(method->index()) {
    case 0:
      add_test(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::addtestRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::addtestResponse*>(
                 response),
             done);
      break;
    case 1:
      query_test(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::querytestRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::querytestResponse*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& TestService::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::addtestRequest::default_instance();
    case 1:
      return ::querytestRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& TestService::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::addtestResponse::default_instance();
    case 1:
      return ::querytestResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

TestService_Stub::TestService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
TestService_Stub::TestService_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
TestService_Stub::~TestService_Stub() {
  if (owns_channel_) delete channel_;
}

void TestService_Stub::add_test(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::addtestRequest* request,
                              ::addtestResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void TestService_Stub::query_test(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::querytestRequest* request,
                              ::querytestResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::addtestRequest*
Arena::CreateMaybeMessage< ::addtestRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::addtestRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::addtestResponse*
Arena::CreateMaybeMessage< ::addtestResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::addtestResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::querytestRequest*
Arena::CreateMaybeMessage< ::querytestRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::querytestRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::querytestResponse*
Arena::CreateMaybeMessage< ::querytestResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::querytestResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
