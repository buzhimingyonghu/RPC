/****************************************************
 * test_add_test_client.cc
 * 2024-05-08 22:37:24
 * Generated by rpc framework makeService.py
****************************************************/

#include <google/protobuf/service.h>
#include "rpc/rpc_channel.h"
#include "rpc/rpc_controller.h"
#include "rpc/rpc_closure.h"
#include "common/log.h"
#include "pb/test_all.pb.h"


void test_client(const std::string& addr) {
  NEWRPCCHANNEL(addr, channel);
  NEWMESSAGE(::addtestRequest, request);
  NEWMESSAGE(::addtestResponse, response);

  // request->set_xxx(100);

  NEWRPCCONTROLLER(controller);
  controller->SetTimeout(2000);

  std::shared_ptr<rpc::RpcClosure> closure = std::make_shared<rpc::RpcClosure>([request, response, controller]() mutable {
    if (controller->GetErrorCode() == 0) {
      INFOLOG("call rpc success, request[%s], response[%s]", request->ShortDebugString().c_str(), response->ShortDebugString().c_str());
      
    } else {
      ERRORLOG("call rpc failed, request[%s], error code[%d], error info[%s]", 
        request->ShortDebugString().c_str(), 
        controller->GetErrorCode(), 
        controller->GetErrorInfo().c_str());
    }

    exit(0);
  });

  CALLRPRC(channel, TestService_Stub, add_test, controller, request, response, closure);

} 

int main(int argc, char* argv[]) {

  rpc::Config::SetGlobalConfig(NULL);

  rpc::Logger::InitGlobalLogger(0);

  std::string addr = std::string(argv[1]);

  test_client(addr);

  return 0;
}
